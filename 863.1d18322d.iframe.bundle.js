"use strict";(self.webpackChunkcocokits=self.webpackChunkcocokits||[]).push([[863],{"./packages/common/core/src/index.ts":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.d(__webpack_exports__,{Rc:()=>cssSelectorRender,Zz:()=>getClassNames,TD:()=>layoutClassNamesConfig});var src=__webpack_require__("./packages/common/utils/src/index.ts");function ui_component_props_validateUiComponentProps({componentName,componentProps,uiComponentsConfig}){if(!uiComponentsConfig)throw new Error("'UIComponentConfig' has not provided in the root of application");const componentConfig=uiComponentsConfig[componentName];if(!componentConfig){const validComponents=Object.keys(uiComponentsConfig).join(", ");throw new Error(`This theme does not support the '${componentName}' component. Please select a different theme that supports this component or choose from available components: ${validComponents}`)}Object.entries(componentConfig).filter((entry=>"additional"!==entry[0])).forEach((entry=>{const propName=entry[0],propConfig=entry[1],componentPropValue=(0,src.Bb)(componentProps[propName]);if(null!=componentPropValue&&typeof componentPropValue!=typeof propConfig?.values[0])throw new Error(`The '${componentName}' component does not support the '${propName}' property as '${typeof componentPropValue}'. Valid type is: ${typeof propConfig?.values[0]}`);if(null!==propConfig){if(propConfig.require&&(0,src.Fm)(componentPropValue))throw new Error(`The '${propName}' property is required for the '${componentName}' component in this theme but was not provided.`);if((0,src.a4)(componentPropValue)&&!propConfig.values.includes(componentPropValue))throw new Error(`'${componentPropValue}' is an invalid value for '${propName}' in '${componentName}'. Accepted values in this theme are: ${propConfig.values.join(", ")}`)}else if((0,src.a4)(componentProps[propName])){const validProps=Object.values(componentConfig).filter((config=>!!config)).join(", ");throw new Error(`The '${componentName}' component does not support the '${propName}' property in this theme. Valid properties include: ${validProps}`)}})),componentConfig.additional&&Object.entries(componentConfig.additional).forEach((entry=>{const propName=entry[0],propConfig=entry[1],componentPropValue=(0,src.Bb)(componentProps[propName]);if(null!=componentPropValue&&typeof componentPropValue!=typeof propConfig?.values[0])throw new Error(`The '${componentName}' component does not support the '${propName}' property as '${typeof componentPropValue}'. Valid type is: ${typeof propConfig?.values[0]}`);if(null!==propConfig){if(propConfig.require&&(0,src.Fm)(componentPropValue))throw new Error(`The '${propName}' property is required for the '${componentName}' component in this theme but was not provided.`);if((0,src.a4)(componentPropValue)&&!propConfig.values.includes(componentPropValue))throw new Error(`'${componentPropValue}' is an invalid value for '${propName}' in '${componentName}'. Accepted values in this theme are: ${propConfig.values.join(", ")}`)}else if((0,src.a4)(componentProps[propName])){const validProps=Object.values(componentConfig).filter((config=>!!config)).join(", ");throw new Error(`The '${componentName}' component does not support the '${propName}' property in this theme. Valid properties include: ${validProps}`)}}))}function valueOrDefault(value,defaultValue,{acceptNull=!0}={}){return acceptNull&&null===value?null:(0,src.a4)(value)?value:defaultValue}const checkboxLayoutClassNamesConfig={prefix:"cck-checkbox",elements:{host:{name:"Host Element",selectors:["cck-checkbox"],description:"Applied to the host element of the Checkbox component."},wrapper:{name:"Wrapper Element",selectors:["cck-checkbox__wrapper"],description:"Applied to a `div` element, child of the `host` element, serving as a wrapper for the checkbox input and label."},inputWrapper:{name:"Input Wrapper Element",selectors:["cck-checkbox__input-wrapper"],description:"Applied to a `div` element, child of the `wrapper` element, serving as a wrapper for the checkbox input and all sub-elements for styling the checkbox."},input:{name:"Input Element",selectors:["cck-checkbox__input"],description:"Applied to the `input` element, child of the `inputWrapper`, with type `checkbox`."},backdrop:{name:"Backdrop Element",selectors:["cck-checkbox__backdrop"],description:"Applied to an empty `div` element, child of the `inputWrapper`, for additional styling based on the design system concepts. Default styles include full-size `absolute` position and `display: none`. Example usage: Ripple effect."},background:{name:"Background Element",selectors:["cck-checkbox__background"],description:"Applied to a `div` element containing a checkmark SVG from `ThemeUiComponentConfig`, child of the `inputWrapper`, to show a custom checkbox symbol based on the design system concepts."},label:{name:"Label Element",selectors:["cck-checkbox__label"],description:"Applied to the `label` element, child of the `wrapper`, containing the label or description of the checkbox."},checked:{name:"Host Element - checked status",selectors:["cck-checkbox--checked"],description:"Applied to the host element of the Checkbox component, when the the checkbox is checked"},unchecked:{name:"Host Element - unchecked status",selectors:["cck-checkbox--unchecked"],description:"Applied to the host element of the Checkbox component, when the the checkbox is unchecked"},disabled:{name:"Host Element - disabled status",selectors:["cck-checkbox--disabled"],description:"Applied to the host element of the Checkbox component, when the the checkbox is disabled"},indeterminate:{name:"Host Element - indeterminate status",selectors:["cck-checkbox--indeterminate"],description:"Applied to the host element of the Checkbox component, when the the checkbox is indeterminate"}}};function cssSelectorRender({block,element,modifier}){return(0,src.uy)(element)&&(0,src.uy)(modifier)?`${block}`:(0,src.Vq)(element)&&(0,src.uy)(modifier)?`${block}__${element}`:(0,src.uy)(element)&&(0,src.Vq)(modifier)?`${block}--${modifier}`:`${block}__${element}--${modifier}`}const errorLayoutClassNamesConfig={prefix:"cck-error",elements:{host:{name:"Host Element",selectors:["cck-error"],description:"It will add to the host element of Error component."}}};const formFieldLayoutClassNamesConfig={prefix:"cck-form-field",elements:{host:{name:"Host Element",selectors:["cck-form-field"],description:"It will add to the host element of FormField component."},wrapper:{name:"Wrapper Element",selectors:["cck-form-field__wrapper"],description:"It;s contains a wrapper element for `leading`, `trailing`, `input-wrapper` elements"},inputWrapper:{name:"Input Wrapper Element",selectors:["cck-form-field__input-wrapper"],description:"It;s contains a wrapper element for `prefix`, `suffix`, `input` or `chip-list` elements"},disabled:{name:"Host Element",selectors:["cck-form-field--disabled"],description:"It will add to the host element of FormField component, the component is disabled"},required:{name:"Host Element",selectors:["cck-form-field--required"],description:"It will add to the host element of FormField component, when the value of input tag is required"},focused:{name:"Host Element",selectors:["cck-form-field--focused"],description:"It will add to the host element of FormField component, when the input tag is focused"},untouched:{name:"Host Element",selectors:["cck-form-field--untouched"],description:"It will add to the host element of FormField component, when the value of input tag is untouched"},touched:{name:"Host Element",selectors:["cck-form-field--touched"],description:"It will add to the host element of FormField component, when the value of input tag is touched"},pristine:{name:"Host Element",selectors:["cck-form-field--pristine"],description:"It will add to the host element of FormField component, when the value of input tag is pristine"},dirty:{name:"Host Element",selectors:["cck-form-field--dirty"],description:"It will add to the host element of FormField component, when the value of input tag is dirty"},valid:{name:"Host Element",selectors:["cck-form-field--valid"],description:"It will add to the host element of FormField component, when the value of input tag is valid"},invalid:{name:"Host Element",selectors:["cck-form-field--invalid"],description:"It will add to the host element of FormField component, when the value of input tag is invalid"},pending:{name:"Host Element",selectors:["cck-form-field--pending"],description:"It will add to the host element of FormField component, when the value of input tag is pending"},error:{name:"Host Element",selectors:["cck-form-field--error"],description:"It will add to the host element of FormField component, when the value of input is invalid, touched and dirty or error component is present"}}};const hintLayoutClassNamesConfig={prefix:"cck-hint",elements:{host:{name:"Host Element",selectors:["cck-hint"],description:"It will add to the host element of Hint component."}}};const iconButtonLayoutClassNamesConfig={prefix:"cck-icon-button",elements:{host:{name:"Host Element",selectors:["cck-icon-button"],description:"It will add to the host element of IconButton component. The default style has `relative` position."},backdrop:{name:"Backdrop Element",selectors:["cck-icon-button__backdrop"],description:"It is an empty `div` added to the host element to add more style base on the design system concepts. (Fro example the Ripple effect). The default styles are full size `absolute` position and `display: none`"}}};const svgIconLayoutClassNamesConfig={prefix:"cck-svg-icon",elements:{host:{name:"Host Element",selectors:["cck-svg-icon"],description:"It will add to the host element of SvgIcon component and it's a wrapper of svg element"},svg:{name:"Svg Element",selectors:["cck-svg-icon__svg"],description:"It will add to the svg element inside of SvgIcon component"}}};const inputLayoutClassNamesConfig={prefix:"cck-input",elements:{host:{name:"Host Element",selectors:["cck-input"],description:"It will add to the host element of Input component."},disabled:{name:"Host Element",selectors:["cck-input--disabled"],description:"It will add to the host element of Input component, the component is disabled"}}};const labelLayoutClassNamesConfig={prefix:"cck-label",elements:{host:{name:"Host Element",selectors:["cck-label"],description:"It will add to the host element of Label component."},labelTag:{name:"Label Element",selectors:["cck-label__label-tag"],description:"It will add to the `label` element of html tag"},requiredMarker:{name:"Required Marker Element",selectors:["cck-label__required-marker"],description:"It will add to the to the required marker element, when the `hideRequiredMarker` of `FormField` component is `false`. It will show the `*` at end of label text"}}};const leadingLayoutClassNamesConfig={prefix:"cck-leading",elements:{host:{name:"Host Element",selectors:["cck-leading"],description:"It will add to the host element of Hint component."},clickable:{name:"Clickable Host Element",selectors:["cck-leading--clickable"],description:"It will add to the host element of Leading component, when the element is clickable"}}};const prefixLayoutClassNamesConfig={prefix:"cck-prefix",elements:{host:{name:"Host Element",selectors:["cck-prefix"],description:"It will add to the host element of Prefix component."}}};const radioButtonLayoutClassNamesConfig={prefix:"cck-radio-button",elements:{host:{name:"Host Element",selectors:["cck-radio-button"],description:"Applied to the host element of the Radio Button component."},wrapper:{name:"Wrapper Element",selectors:["cck-radio-button__wrapper"],description:"Applied to a `div` element, child of the `host` element, serving as a wrapper for the radio input and label."},inputWrapper:{name:"Input Wrapper Element",selectors:["cck-radio-button__input-wrapper"],description:"Applied to a `div` element, child of the `wrapper` element, serving as a wrapper for the radio input and all sub-elements for styling the radio button."},input:{name:"Input Element",selectors:["cck-radio-button__input"],description:"Applied to the `input` element, child of the `inputWrapper`, with type `radio`."},backdrop:{name:"Backdrop Element",selectors:["cck-radio-button__backdrop"],description:"Applied to an empty `div` element, child of the `inputWrapper`, for additional styling based on the design system concepts. Default styles include full-size `absolute` position and `display: none`. Example usage: Ripple effect."},background:{name:"Background Element",selectors:["cck-radio-button__background"],description:"Applied to a `div` element containing a `radioButtonBackground` from `ThemeUiComponentConfig`, child of the `inputWrapper`, to show a custom radio symbol based on the design system concepts."},label:{name:"Label Element",selectors:["cck-radio-button__label"],description:"Applied to the `label` element, child of the `wrapper`, containing the label or description of the radio."},checked:{name:"Host Element - checked status",selectors:["cck-radio-button--checked"],description:"Applied to the host element of the Radio button component, when the the radio is checked"},unchecked:{name:"Host Element - unchecked status",selectors:["cck-radio-button--unchecked"],description:"Applied to the host element of the Radio button component, when the the radio is unchecked"},disabled:{name:"Host Element - disabled status",selectors:["cck-radio-button--disabled"],description:"Applied to the host element of the Radio Button component, when the the radio is disabled"}}};function getRadioButtonClassNames(componentProps,uiComponentsConfig){const options={componentName:"radioButton",componentProps,uiComponentsConfig};return ui_component_props_validateUiComponentProps(options),{host:[...radioButtonLayoutClassNamesConfig.elements.host.selectors,...class_names_getHostClassNames(radioButtonLayoutClassNamesConfig.prefix,options)],wrapper:[...radioButtonLayoutClassNamesConfig.elements.wrapper.selectors],inputWrapper:[...radioButtonLayoutClassNamesConfig.elements.inputWrapper.selectors],input:[...radioButtonLayoutClassNamesConfig.elements.input.selectors],backdrop:[...radioButtonLayoutClassNamesConfig.elements.backdrop.selectors],background:[...radioButtonLayoutClassNamesConfig.elements.background.selectors],label:[...radioButtonLayoutClassNamesConfig.elements.label.selectors],checked:[...radioButtonLayoutClassNamesConfig.elements.checked.selectors],unchecked:[...radioButtonLayoutClassNamesConfig.elements.unchecked.selectors],disabled:[...radioButtonLayoutClassNamesConfig.elements.disabled.selectors]}}const radioGroupLayoutClassNamesConfig={prefix:"cck-radio-group",elements:{host:{name:"Host Element",selectors:["cck-radio-group"],description:"It will add to the host element of Radio Group component."},disabled:{name:"Host Element - disabled status",selectors:["cck-radio-group--disabled"],description:"Applied to the host element of the Radio Group component, when the all radio group is disabled"}}};const suffixLayoutClassNamesConfig={prefix:"cck-suffix",elements:{host:{name:"Host Element",selectors:["cck-suffix"],description:"It will add to the host element of Suffix component."}}};const trailingLayoutClassNamesConfig={prefix:"cck-trailing",elements:{host:{name:"Host Element",selectors:["cck-trailing"],description:"It will add to the host element of Trailing component."},clickable:{name:"Clickable Host Element",selectors:["cck-trailing--clickable"],description:"It will add to the host element of Trailing component, when the element is clickable"}}};const CLASS_NAMES_FN_MAP={formField:function getFormFieldClassNames(componentProps,uiComponentsConfig){const options={componentName:"formField",componentProps,uiComponentsConfig};return ui_component_props_validateUiComponentProps(options),{host:[...formFieldLayoutClassNamesConfig.elements.host.selectors,...class_names_getHostClassNames(formFieldLayoutClassNamesConfig.prefix,options)],wrapper:[...formFieldLayoutClassNamesConfig.elements.wrapper.selectors],inputWrapper:[...formFieldLayoutClassNamesConfig.elements.inputWrapper.selectors],disabled:[...formFieldLayoutClassNamesConfig.elements.disabled.selectors],required:[...formFieldLayoutClassNamesConfig.elements.required.selectors],focused:[...formFieldLayoutClassNamesConfig.elements.focused.selectors],untouched:[...formFieldLayoutClassNamesConfig.elements.untouched.selectors],touched:[...formFieldLayoutClassNamesConfig.elements.touched.selectors],pristine:[...formFieldLayoutClassNamesConfig.elements.pristine.selectors],dirty:[...formFieldLayoutClassNamesConfig.elements.dirty.selectors],valid:[...formFieldLayoutClassNamesConfig.elements.valid.selectors],invalid:[...formFieldLayoutClassNamesConfig.elements.invalid.selectors],pending:[...formFieldLayoutClassNamesConfig.elements.pending.selectors],error:[...formFieldLayoutClassNamesConfig.elements.error.selectors]}},label:function getLabelClassNames(componentProps,uiComponentsConfig){const options={componentName:"label",componentProps,uiComponentsConfig};return ui_component_props_validateUiComponentProps(options),{host:[...labelLayoutClassNamesConfig.elements.host.selectors,...class_names_getHostClassNames(labelLayoutClassNamesConfig.prefix,options)],labelTag:[...labelLayoutClassNamesConfig.elements.labelTag.selectors],requiredMarker:[...labelLayoutClassNamesConfig.elements.requiredMarker.selectors]}},error:function getErrorClassNames(componentProps,uiComponentsConfig){const options={componentName:"error",componentProps,uiComponentsConfig};return ui_component_props_validateUiComponentProps(options),{host:[...errorLayoutClassNamesConfig.elements.host.selectors,...class_names_getHostClassNames(errorLayoutClassNamesConfig.prefix,options)]}},hint:function getHintClassNames(componentProps,uiComponentsConfig){const options={componentName:"hint",componentProps,uiComponentsConfig};return ui_component_props_validateUiComponentProps(options),{host:[...hintLayoutClassNamesConfig.elements.host.selectors,...class_names_getHostClassNames(hintLayoutClassNamesConfig.prefix,options)]}},prefix:function getPrefixClassNames(componentProps,uiComponentsConfig){const options={componentName:"prefix",componentProps,uiComponentsConfig};return ui_component_props_validateUiComponentProps(options),{host:[...prefixLayoutClassNamesConfig.elements.host.selectors,...class_names_getHostClassNames(prefixLayoutClassNamesConfig.prefix,options)]}},suffix:function getSuffixClassNames(componentProps,uiComponentsConfig){const options={componentName:"suffix",componentProps,uiComponentsConfig};return ui_component_props_validateUiComponentProps(options),{host:[...suffixLayoutClassNamesConfig.elements.host.selectors,...class_names_getHostClassNames(suffixLayoutClassNamesConfig.prefix,options)]}},trailing:function getTrailingClassNames(componentProps,uiComponentsConfig){const options={componentName:"trailing",componentProps,uiComponentsConfig};return ui_component_props_validateUiComponentProps(options),{host:[...trailingLayoutClassNamesConfig.elements.host.selectors,...class_names_getHostClassNames(trailingLayoutClassNamesConfig.prefix,options)],clickable:[...trailingLayoutClassNamesConfig.elements.clickable.selectors]}},leading:function getLeadingClassNames(componentProps,uiComponentsConfig){const options={componentName:"leading",componentProps,uiComponentsConfig};return ui_component_props_validateUiComponentProps(options),{host:[...leadingLayoutClassNamesConfig.elements.host.selectors,...class_names_getHostClassNames(leadingLayoutClassNamesConfig.prefix,options)],clickable:[...leadingLayoutClassNamesConfig.elements.clickable.selectors]}},input:function getInputClassNames(componentProps,uiComponentsConfig){const options={componentName:"input",componentProps,uiComponentsConfig};return ui_component_props_validateUiComponentProps(options),{host:[...inputLayoutClassNamesConfig.elements.host.selectors,...class_names_getHostClassNames(inputLayoutClassNamesConfig.prefix,options)],disabled:[...inputLayoutClassNamesConfig.elements.disabled.selectors]}},radioButton:getRadioButtonClassNames,radioGroup:function getRadioGroupClassNames(componentProps,uiComponentsConfig){const options={componentName:"radioGroup",componentProps,uiComponentsConfig};return ui_component_props_validateUiComponentProps(options),{host:[...radioGroupLayoutClassNamesConfig.elements.host.selectors,...class_names_getHostClassNames(radioGroupLayoutClassNamesConfig.prefix,options)],disabled:[...radioGroupLayoutClassNamesConfig.elements.disabled.selectors]}},checkbox:function getCheckboxClassNames(componentProps,uiComponentsConfig){const options={componentName:"checkbox",componentProps,uiComponentsConfig};return ui_component_props_validateUiComponentProps(options),{host:[...checkboxLayoutClassNamesConfig.elements.host.selectors,...class_names_getHostClassNames(checkboxLayoutClassNamesConfig.prefix,options)],wrapper:[...checkboxLayoutClassNamesConfig.elements.wrapper.selectors],inputWrapper:[...checkboxLayoutClassNamesConfig.elements.inputWrapper.selectors],input:[...checkboxLayoutClassNamesConfig.elements.input.selectors],backdrop:[...checkboxLayoutClassNamesConfig.elements.backdrop.selectors],background:[...checkboxLayoutClassNamesConfig.elements.background.selectors],label:[...checkboxLayoutClassNamesConfig.elements.label.selectors],checked:[...checkboxLayoutClassNamesConfig.elements.checked.selectors],unchecked:[...checkboxLayoutClassNamesConfig.elements.unchecked.selectors],disabled:[...checkboxLayoutClassNamesConfig.elements.disabled.selectors],indeterminate:[...checkboxLayoutClassNamesConfig.elements.indeterminate.selectors]}},button:getRadioButtonClassNames,iconButton:function getIconButtonClassNames(componentProps,uiComponentsConfig){const options={componentName:"iconButton",componentProps,uiComponentsConfig};return ui_component_props_validateUiComponentProps(options),{host:[...iconButtonLayoutClassNamesConfig.elements.host.selectors,...class_names_getHostClassNames(iconButtonLayoutClassNamesConfig.prefix,options)],backdrop:[...iconButtonLayoutClassNamesConfig.elements.backdrop.selectors]}},svgIcon:function getSvgIconClassNames(componentProps,uiComponentsConfig){const options={componentName:"svgIcon",componentProps,uiComponentsConfig};return ui_component_props_validateUiComponentProps(options),{host:[...svgIconLayoutClassNamesConfig.elements.host.selectors,...class_names_getHostClassNames(svgIconLayoutClassNamesConfig.prefix,options)],svg:[...svgIconLayoutClassNamesConfig.elements.svg.selectors]}}};function getClassNames(componentName,componentProps,uiComponentsConfig){return CLASS_NAMES_FN_MAP[componentName](componentProps,uiComponentsConfig)}function class_names_getHostClassNames(prefix,options){const classNames=[],{type,color,size,additional}=function getComponentPropsWithDefault({componentName,componentProps,uiComponentsConfig}){const additional=(0,src.ks)(uiComponentsConfig?.[componentName].additional??{},((value,key)=>({[key]:valueOrDefault(componentProps.additional?.[key],value?.default)})));return{type:valueOrDefault(componentProps.type,uiComponentsConfig?.[componentName].type?.default,{acceptNull:!1}),color:valueOrDefault(componentProps.color,uiComponentsConfig?.[componentName].color?.default),size:valueOrDefault(componentProps.size,uiComponentsConfig?.[componentName].size?.default),additional}}(options);return(0,src.Vq)(type)&&classNames.push(cssSelectorRender({block:prefix,element:type})),(0,src.Vq)(type)&&options.componentProps.type!==type&&classNames.push(cssSelectorRender({block:prefix,modifier:"default-type"})),color&&classNames.push(cssSelectorRender({block:prefix,element:"color",modifier:color})),color&&options.componentProps.color!==color&&classNames.push(cssSelectorRender({block:prefix,modifier:"default-color"})),size&&classNames.push(cssSelectorRender({block:prefix,element:"size",modifier:size})),size&&options.componentProps.size!==size&&classNames.push(cssSelectorRender({block:prefix,modifier:"default-size"})),additional&&(0,src.Qs)(additional,((value,key)=>{classNames.push(cssSelectorRender({block:prefix,element:key,modifier:value}))})),classNames}const buttonLayoutClassNamesConfig={prefix:"cck-button",elements:{host:{name:"Host Element",selectors:["cck-button"],description:"It will add to the host element of Button component. The default style has `relative` position."},backdrop:{name:"Backdrop Element",selectors:["cck-button__backdrop"],description:"It is an empty `div` added to the host element to add more style base on the design system concepts. (Fro example the Ripple effect). The default styles are full size `absolute` position and `display: none`"}}};const layoutClassNamesConfig={svgIcon:svgIconLayoutClassNamesConfig,button:buttonLayoutClassNamesConfig,iconButton:iconButtonLayoutClassNamesConfig,checkbox:checkboxLayoutClassNamesConfig,radioGroup:radioGroupLayoutClassNamesConfig,radioButton:radioButtonLayoutClassNamesConfig,formField:formFieldLayoutClassNamesConfig,label:labelLayoutClassNamesConfig,error:errorLayoutClassNamesConfig,hint:hintLayoutClassNamesConfig,prefix:prefixLayoutClassNamesConfig,suffix:suffixLayoutClassNamesConfig,trailing:trailingLayoutClassNamesConfig,leading:leadingLayoutClassNamesConfig,input:inputLayoutClassNamesConfig}}}]);