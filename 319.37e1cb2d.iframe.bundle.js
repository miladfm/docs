"use strict";(self.webpackChunkcocokits=self.webpackChunkcocokits||[]).push([[319],{"./packages/common/core/src/index.ts":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.d(__webpack_exports__,{Rc:()=>cssSelectorRender,TA:()=>getButtonClassNames,gW:()=>getCheckboxClassNames,MW:()=>getIconButtonClassNames,Sb:()=>getRadioButtonClassNames,Fu:()=>getRadioGroupClassNames,UU:()=>getSvgIconClassNames,TD:()=>layoutClassNamesConfig});var src=__webpack_require__("./packages/common/utils/src/index.ts");function cssSelectorRender(block,element,modifier){return(0,src.uy)(modifier)?`${block}__${element}`:`${block}__${element}--${modifier}`}function validateUiComponentProps({componentName,componentProps,uiComponentsConfig}){if(!uiComponentsConfig)throw new Error("'UIComponentConfig' has not provided in the root of application");const componentConfig=uiComponentsConfig[componentName];if(!componentConfig){const validComponents=Object.keys(uiComponentsConfig).join(", ");throw new Error(`This theme does not support the '${componentName}' component. Please select a different theme that supports this component or choose from available components: ${validComponents}`)}Object.entries(componentConfig).filter((entry=>"additional"!==entry[0])).forEach((entry=>{const propName=entry[0],propConfig=entry[1],componentPropValue=(0,src.Bb)(componentProps[propName]);if(null!=componentPropValue&&typeof componentPropValue!=typeof propConfig?.values[0])throw new Error(`The '${componentName}' component does not support the '${propName}' property as '${typeof componentPropValue}'. Valid type is: ${typeof propConfig?.values[0]}`);if(null!==propConfig){if(propConfig.require&&(0,src.Fm)(componentPropValue))throw new Error(`The '${propName}' property is required for the '${componentName}' component in this theme but was not provided.`);if((0,src.a4)(componentPropValue)&&!propConfig.values.includes(componentPropValue))throw new Error(`'${componentPropValue}' is an invalid value for '${propName}' in '${componentName}'. Accepted values in this theme are: ${propConfig.values.join(", ")}`)}else if((0,src.a4)(componentProps[propName])){const validProps=Object.values(componentConfig).filter((config=>!!config)).join(", ");throw new Error(`The '${componentName}' component does not support the '${propName}' property in this theme. Valid properties include: ${validProps}`)}})),componentConfig.additional&&Object.entries(componentConfig.additional).forEach((entry=>{const propName=entry[0],propConfig=entry[1],componentPropValue=(0,src.Bb)(componentProps[propName]);if(null!=componentPropValue&&typeof componentPropValue!=typeof propConfig?.values[0])throw new Error(`The '${componentName}' component does not support the '${propName}' property as '${typeof componentPropValue}'. Valid type is: ${typeof propConfig?.values[0]}`);if(null!==propConfig){if(propConfig.require&&(0,src.Fm)(componentPropValue))throw new Error(`The '${propName}' property is required for the '${componentName}' component in this theme but was not provided.`);if((0,src.a4)(componentPropValue)&&!propConfig.values.includes(componentPropValue))throw new Error(`'${componentPropValue}' is an invalid value for '${propName}' in '${componentName}'. Accepted values in this theme are: ${propConfig.values.join(", ")}`)}else if((0,src.a4)(componentProps[propName])){const validProps=Object.values(componentConfig).filter((config=>!!config)).join(", ");throw new Error(`The '${componentName}' component does not support the '${propName}' property in this theme. Valid properties include: ${validProps}`)}}))}function valueOrDefault(value,defaultValue,{acceptNull=!0}={}){return acceptNull&&null===value?null:(0,src.a4)(value)?value:defaultValue}function getHostClassNames(prefix,options){const classNames=[],{type,color,size,additional}=function getComponentPropsWithDefault({componentName,componentProps,uiComponentsConfig}){const additional=(0,src.ks)(uiComponentsConfig?.[componentName].additional??{},((value,key)=>({[key]:valueOrDefault(componentProps.additional?.[key],value?.default)})));return{type:valueOrDefault(componentProps.type,uiComponentsConfig?.[componentName].type?.default,{acceptNull:!1}),color:valueOrDefault(componentProps.color,uiComponentsConfig?.[componentName].color?.default),size:valueOrDefault(componentProps.size,uiComponentsConfig?.[componentName].size?.default),additional}}(options);return(0,src.Vq)(type)&&classNames.push(cssSelectorRender(prefix,type)),color&&classNames.push(cssSelectorRender(prefix,"color",color)),size&&classNames.push(cssSelectorRender(prefix,"size",size)),additional&&(0,src.Qs)(additional,((value,key)=>{classNames.push(cssSelectorRender(prefix,key,value))})),classNames}const buttonLayoutClassNamesConfig={prefix:"cck-button",elements:{host:{name:"Host Element",selectors:["cck-button"],description:"It will add to the host element of Button component. The default style has `relative` position."},backdrop:{name:"Backdrop Element",selectors:["cck-button__backdrop"],description:"It is an empty `div` added to the host element to add more style base on the design system concepts. (Fro example the Ripple effect). The default styles are full size `absolute` position and `display: none`"}}};function getButtonClassNames(componentProps,uiComponentsConfig){const options={componentName:"button",componentProps,uiComponentsConfig};return validateUiComponentProps(options),{host:[...buttonLayoutClassNamesConfig.elements.host.selectors,...getHostClassNames(buttonLayoutClassNamesConfig.prefix,options)],backdrop:[...buttonLayoutClassNamesConfig.elements.backdrop.selectors]}}const checkboxLayoutClassNamesConfig={prefix:"cck-checkbox",elements:{host:{name:"Host Element",selectors:["cck-checkbox"],description:"Applied to the host element of the Checkbox component."},wrapper:{name:"Wrapper Element",selectors:["cck-checkbox__wrapper"],description:"Applied to a `div` element, child of the `host` element, serving as a wrapper for the checkbox input and label."},inputWrapper:{name:"Input Wrapper Element",selectors:["cck-checkbox__input-wrapper"],description:"Applied to a `div` element, child of the `wrapper` element, serving as a wrapper for the checkbox input and all sub-elements for styling the checkbox."},input:{name:"Input Element",selectors:["cck-checkbox__input"],description:"Applied to the `input` element, child of the `inputWrapper`, with type `checkbox`."},backdrop:{name:"Backdrop Element",selectors:["cck-checkbox__backdrop"],description:"Applied to an empty `div` element, child of the `inputWrapper`, for additional styling based on the design system concepts. Default styles include full-size `absolute` position and `display: none`. Example usage: Ripple effect."},background:{name:"Background Element",selectors:["cck-checkbox__background"],description:"Applied to a `div` element containing a checkmark SVG from `ThemeUiComponentConfig`, child of the `inputWrapper`, to show a custom checkbox symbol based on the design system concepts."},label:{name:"Label Element",selectors:["cck-checkbox__label"],description:"Applied to the `label` element, child of the `wrapper`, containing the label or description of the checkbox."},checked:{name:"Host Element - checked status",selectors:["cck-checkbox--checked"],description:"Applied to the host element of the Checkbox component, when the the checkbox is checked"},unchecked:{name:"Host Element - unchecked status",selectors:["cck-checkbox--unchecked"],description:"Applied to the host element of the Checkbox component, when the the checkbox is unchecked"},disabled:{name:"Host Element - disabled status",selectors:["cck-checkbox--disabled"],description:"Applied to the host element of the Checkbox component, when the the checkbox is disabled"},indeterminate:{name:"Host Element - indeterminate status",selectors:["cck-checkbox--indeterminate"],description:"Applied to the host element of the Checkbox component, when the the checkbox is indeterminate"}}};function getCheckboxClassNames(componentProps,uiComponentsConfig){const options={componentName:"checkbox",componentProps,uiComponentsConfig};return validateUiComponentProps(options),{host:[...checkboxLayoutClassNamesConfig.elements.host.selectors,...getHostClassNames(checkboxLayoutClassNamesConfig.prefix,options)],wrapper:[...checkboxLayoutClassNamesConfig.elements.wrapper.selectors],inputWrapper:[...checkboxLayoutClassNamesConfig.elements.inputWrapper.selectors],input:[...checkboxLayoutClassNamesConfig.elements.input.selectors],backdrop:[...checkboxLayoutClassNamesConfig.elements.backdrop.selectors],background:[...checkboxLayoutClassNamesConfig.elements.background.selectors],label:[...checkboxLayoutClassNamesConfig.elements.label.selectors],checked:[...checkboxLayoutClassNamesConfig.elements.checked.selectors],unchecked:[...checkboxLayoutClassNamesConfig.elements.unchecked.selectors],disabled:[...checkboxLayoutClassNamesConfig.elements.disabled.selectors],indeterminate:[...checkboxLayoutClassNamesConfig.elements.indeterminate.selectors]}}const iconButtonLayoutClassNamesConfig={prefix:"cck-icon-button",elements:{host:{name:"Host Element",selectors:["cck-icon-button"],description:"It will add to the host element of IconButton component. The default style has `relative` position."},backdrop:{name:"Backdrop Element",selectors:["cck-icon-button__backdrop"],description:"It is an empty `div` added to the host element to add more style base on the design system concepts. (Fro example the Ripple effect). The default styles are full size `absolute` position and `display: none`"}}};function getIconButtonClassNames(componentProps,uiComponentsConfig){const options={componentName:"iconButton",componentProps,uiComponentsConfig};return validateUiComponentProps(options),{host:[...iconButtonLayoutClassNamesConfig.elements.host.selectors,...getHostClassNames(iconButtonLayoutClassNamesConfig.prefix,options)],backdrop:[...iconButtonLayoutClassNamesConfig.elements.backdrop.selectors]}}const svgIconLayoutClassNamesConfig={prefix:"cck-svg-icon",elements:{host:{name:"Host Element",selectors:["cck-svg-icon"],description:"It will add to the host element of SvgIcon component and it's a wrapper of svg element"},svg:{name:"Svg Element",selectors:["cck-svg-icon__svg"],description:"It will add to the svg element inside of SvgIcon component"}}};function getSvgIconClassNames(componentProps,uiComponentsConfig){const options={componentName:"svgIcon",componentProps,uiComponentsConfig};return validateUiComponentProps(options),{host:[...svgIconLayoutClassNamesConfig.elements.host.selectors,...getHostClassNames(svgIconLayoutClassNamesConfig.prefix,options)],svg:[...svgIconLayoutClassNamesConfig.elements.svg.selectors]}}const radioGroupLayoutClassNamesConfig={prefix:"cck-radio-group",elements:{host:{name:"Host Element",selectors:["cck-radio-group"],description:"It will add to the host element of Radio Group component."},disabled:{name:"Host Element - disabled status",selectors:["cck-radio-group--disabled"],description:"Applied to the host element of the Radio Group component, when the all radio group is disabled"}}};function getRadioGroupClassNames(componentProps,uiComponentsConfig){const options={componentName:"radioGroup",componentProps,uiComponentsConfig};return validateUiComponentProps(options),{host:[...radioGroupLayoutClassNamesConfig.elements.host.selectors,...getHostClassNames(radioGroupLayoutClassNamesConfig.prefix,options)],disabled:[...radioGroupLayoutClassNamesConfig.elements.disabled.selectors]}}const radioButtonLayoutClassNamesConfig={prefix:"cck-radio-button",elements:{host:{name:"Host Element",selectors:["cck-radio-button"],description:"Applied to the host element of the Radio Button component."},wrapper:{name:"Wrapper Element",selectors:["cck-radio-button__wrapper"],description:"Applied to a `div` element, child of the `host` element, serving as a wrapper for the radio input and label."},inputWrapper:{name:"Input Wrapper Element",selectors:["cck-radio-button__input-wrapper"],description:"Applied to a `div` element, child of the `wrapper` element, serving as a wrapper for the radio input and all sub-elements for styling the radio button."},input:{name:"Input Element",selectors:["cck-radio-button__input"],description:"Applied to the `input` element, child of the `inputWrapper`, with type `radio`."},backdrop:{name:"Backdrop Element",selectors:["cck-radio-button__backdrop"],description:"Applied to an empty `div` element, child of the `inputWrapper`, for additional styling based on the design system concepts. Default styles include full-size `absolute` position and `display: none`. Example usage: Ripple effect."},background:{name:"Background Element",selectors:["cck-radio-button__background"],description:"Applied to a `div` element containing a `radioButtonBackground` from `ThemeUiComponentConfig`, child of the `inputWrapper`, to show a custom radio symbol based on the design system concepts."},label:{name:"Label Element",selectors:["cck-radio-button__label"],description:"Applied to the `label` element, child of the `wrapper`, containing the label or description of the radio."},checked:{name:"Host Element - checked status",selectors:["cck-radio-button--checked"],description:"Applied to the host element of the Radio button component, when the the radio is checked"},unchecked:{name:"Host Element - unchecked status",selectors:["cck-radio-button--unchecked"],description:"Applied to the host element of the Radio button component, when the the radio is unchecked"},disabled:{name:"Host Element - disabled status",selectors:["cck-radio-button--disabled"],description:"Applied to the host element of the Radio Button component, when the the radio is disabled"}}};function getRadioButtonClassNames(componentProps,uiComponentsConfig){const options={componentName:"radioButton",componentProps,uiComponentsConfig};return validateUiComponentProps(options),{host:[...radioButtonLayoutClassNamesConfig.elements.host.selectors,...getHostClassNames(radioButtonLayoutClassNamesConfig.prefix,options)],wrapper:[...radioButtonLayoutClassNamesConfig.elements.wrapper.selectors],inputWrapper:[...radioButtonLayoutClassNamesConfig.elements.inputWrapper.selectors],input:[...radioButtonLayoutClassNamesConfig.elements.input.selectors],backdrop:[...radioButtonLayoutClassNamesConfig.elements.backdrop.selectors],background:[...radioButtonLayoutClassNamesConfig.elements.background.selectors],label:[...radioButtonLayoutClassNamesConfig.elements.label.selectors],checked:[...radioButtonLayoutClassNamesConfig.elements.checked.selectors],unchecked:[...radioButtonLayoutClassNamesConfig.elements.unchecked.selectors],disabled:[...radioButtonLayoutClassNamesConfig.elements.disabled.selectors]}}const layoutClassNamesConfig={svgIcon:svgIconLayoutClassNamesConfig,button:buttonLayoutClassNamesConfig,iconButton:iconButtonLayoutClassNamesConfig,checkbox:checkboxLayoutClassNamesConfig,radioGroup:radioGroupLayoutClassNamesConfig,radioButton:radioButtonLayoutClassNamesConfig}}}]);